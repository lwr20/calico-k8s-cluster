#cloud-config
---
write_files:
  # Network config file for the Calico CNI plugin.
  - path: /etc/cni/net.d/10-calico.conf 
    owner: root
    permissions: 0755
    content: |
      {
          "name": "calico-k8s-network",
          "type": "calico",
          "etcd_authority": "172.18.18.101:2379",
          "log_level": "debug",
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s",
              "k8s_api_root": "http://127.0.0.1:8080/api/v1/"
          }
      }

  # Get the certificates for the master.
  - path: /opt/bin/get-certs.sh
    owner: root
    permissions: 0755
    content: |
      #!/bin/bash
      sudo mkdir -p /etc/kubernetes/ssl/
      sudo wget -N -P /etc/kubernetes/ssl/ http://172.18.18.1:8000/ssl/ca.pem
      sudo wget -N -P /etc/kubernetes/ssl/ http://172.18.18.1:8000/ssl/apiserver.pem
      sudo wget -N -P /etc/kubernetes/ssl/ http://172.18.18.1:8000/ssl/apiserver-key.pem
      
      # Set permissions.
      sudo chmod 600 /etc/kubernetes/ssl/*-key.pem
      sudo chown root:root /etc/kubernetes/ssl/*-key.pem

  # Manifest which starts the Calico policy agent on the master.
  - path: /etc/kubernetes/manifests/calico-policy.yaml
    owner: root
    permissions: 0755
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: calico-policy-controller
        namespace: calico-system
      spec:
        hostNetwork: true
        containers:
          # The Calico policy controller.
          - name: k8s-policy-controller
            image: calico/kube-policy-controller:latest
            env:
              - name: ETCD_ENDPOINTS
                value: "http://127.0.0.1:2379"
              - name: K8S_API
                value: "http://127.0.0.1:8080"
              - name: LEADER_ELECTION 
                value: "true"
          # Leader election container used by the policy agent.
          - name: leader-elector
            image: quay.io/calico/leader-elector:v0.1.0 
            imagePullPolicy: IfNotPresent
            args:
              - "--election=calico-policy-election"
              - "--http=127.0.0.1:4040"
            ports:
              - containerPort: 4040
                protocol: TCP

coreos:
  update:
    reboot-strategy: off
  etcd2:
    name: "etcdserver"
    listen-client-urls: http://0.0.0.0:2379
    advertise-client-urls: http://$private_ipv4:2379
    initial-cluster: etcdserver=http://$private_ipv4:2380
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://0.0.0.0:2380
  fleet:
    metadata: "role=master"
    etcd_servers: "http://localhost:2379"
  units:
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd2.service get-certs.service
        After=etcd2.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/{K8S_VERSION}/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStart=/opt/bin/kube-apiserver \
        --allow-privileged=true \
        --etcd-servers=http://127.0.0.1:2379 \
        --secure-port=443 \
        --bind-address=0.0.0.0 \
        --advertise-address=172.18.18.101 \
        --insecure-bind-address=127.0.0.1 \
        --service-cluster-ip-range=10.100.0.0/24 \
        --runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true \
        --admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota \
        --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem \
        --client-ca-file=/etc/kubernetes/ssl/ca.pem \
        --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem \
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/{K8S_VERSION}/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStart=/opt/bin/kube-controller-manager \
        --master=127.0.0.1:8080 \
        --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem \
        --root-ca-file=/etc/kubernetes/ssl/ca.pem
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/{K8S_VERSION}/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStart=/opt/bin/kube-scheduler --master=127.0.0.1:8080
        Restart=always
        RestartSec=10
    - name: calico-node.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=calicoctl node
        After=docker.service
        Requires=docker.service
        
        [Service]
        User=root
        Environment="ETCD_AUTHORITY=172.18.18.101:2379"
        PermissionsStartOnly=true
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.com/projectcalico/calico-containers/releases/download/v0.18.0/calicoctl 
        ExecStartPre=/usr/bin/chmod +x /opt/bin/calicoctl
        ExecStartPre=/opt/bin/calicoctl pool add 192.168.0.0/16 --nat-outgoing
        ExecStart=/opt/bin/calicoctl node --detach=false --node-image={NODE_IMAGE}
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=docker.service
        Requires=docker.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/{K8S_VERSION}/bin/linux/amd64/kubectl
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubectl
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/{K8S_VERSION}/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        ExecStartPre=/usr/bin/wget -N -P /opt/cni/bin http://172.18.18.1:8000/calico-cni/dist/calico 
        ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico
        ExecStartPre=/usr/bin/wget -N -P /opt/cni/bin http://172.18.18.1:8000/calico-cni/dist/calico-ipam
        ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico-ipam
        ExecStart=/opt/bin/kubelet \
        --port=10250 \
        --address=0.0.0.0 \
        --allow-privileged=true \
        --register-node=true \
        --register-schedulable=false \
        --cluster-dns=10.100.0.10 \
        --cluster-domain=cluster.local \
        --api-servers=http://localhost:8080 \
        --config=/etc/kubernetes/manifests \
        --network-plugin-dir=/etc/cni/net.d \
        --network-plugin=cni \
        --hostname-override=$private_ipv4 \
        --logtostderr=true
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kubelet.service
        After=kubelet.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin  https://storage.googleapis.com/kubernetes-release/release/{K8S_VERSION}/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        ExecStart=/opt/bin/kube-proxy \
        --master=http://localhost:8080 \
        --cluster-cidr="192.168.0.0/16" \
        --proxy-mode=iptables \
        --logtostderr=true
        Restart=always
        RestartSec=10

    - name: get-certs.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Install certificates
        After=network-online.service
        [Service]
        ExecStart=/opt/bin/get-certs.sh
        RemainAfterExit=yes
        Type=oneshot
